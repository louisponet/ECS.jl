var documenterSearchIndex = {"docs":
[{"location":"components/#Components","page":"Components","title":"Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"CurrentModule = Overseer","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"Component\nPooledComponent","category":"page"},{"location":"components/#Overseer.Component","page":"Components","title":"Overseer.Component","text":"The most basic Component type.\n\nIndexing into a component with an Entity will return the data linked to that entity, indexing with a regular Int will return directly the data that is stored in the data vector at that index, i.e. generally not the storage linked to the Entity with that Int as id.\n\n\n\n\n\n","category":"type"},{"location":"systems/#Systems","page":"Systems","title":"Systems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"CurrentModule = Overseer","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"System","category":"page"},{"location":"systems/#Overseer.System","page":"Systems","title":"Overseer.System","text":"System\n\nSystems represent the part of ECS where the actual \"work\" happens, by overloading the Overseer.update function for a specific System, with the signature Overseer.update(::System, m::AbstractLedger). When updating a Ledger the update function of each system will be called. By overloading Overseer.requested_components, for a System, it is ensured that those components are present in the Ledger that holds the System.  Following the ECS design, a System should not hold data except for maybe some settings parameters.\n\n\n\n\n\n","category":"type"},{"location":"ledger/#Ledger","page":"Ledger","title":"Ledger","text":"","category":"section"},{"location":"ledger/","page":"Ledger","title":"Ledger","text":"CurrentModule = Overseer","category":"page"},{"location":"ledger/","page":"Ledger","title":"Ledger","text":"Ledger","category":"page"},{"location":"ledger/#Overseer.Ledger","page":"Ledger","title":"Overseer.Ledger","text":"Ledger\n\nA Ledger holds all the Entities, Components and Systems. It has interfaces to create new Entities and access the Components. Calling update(ledger) will call all the update functions of the systems in the Ledger.\n\nExample\n\nl = Ledger()\ne1 = Entity(l, CompType1(1, 2))\ne2 = Entity(l, CompType1(1, 2), CompType2(\"comptype2\"))\n\nthis has created a new Ledger with two Entities, the first having 1 component of type CompType1, the second has 2 components.\n\nl[e1]\n\nWill return an EntityState, essentially a bag of Components e1 belongs to.\n\nl[CompType1]\n\nreturns the AbstractComponent holding the data of type CompType1.\n\nFor further info on interactions with a Ledger, see:\n\nin\ndelete!\nsetindex!\n\n\n\n\n\n","category":"type"},{"location":"entities/#Entities","page":"Entities","title":"Entities","text":"","category":"section"},{"location":"entities/","page":"Entities","title":"Entities","text":"CurrentModule = Overseer","category":"page"},{"location":"entities/","page":"Entities","title":"Entities","text":"Entity\nEntityState","category":"page"},{"location":"iteration/#Iteration","page":"Iteration","title":"Iteration","text":"","category":"section"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"CurrentModule = Overseer","category":"page"},{"location":"iteration/","page":"Iteration","title":"Iteration","text":"@entities_in\n@safe_entities_in\npools\nentity_pool","category":"page"},{"location":"iteration/#Overseer.@entities_in","page":"Iteration","title":"Overseer.@entities_in","text":"@entities_in(comp_expr)\n@entities_in(l, comp_expr)\n\nThis macro creates an iterator that iterates over all entities that are present in the components according to the expression passed to it. Each iteration an EntityState is returned that refers to the entity and the associated data inside the Components.\n\ncomp_expr is a boolean expression that is used to decide which entities to return.\n\nExamples\n\nfor e in @entities_in(comp1 && (comp2 || comp3) && !comp4)\n    # do something with e\nend\n\nfor e in @entities_in(ledger, CompType1 && (CompType2 || CompType3) && !CompType4)\n    # do something with e\nend\n\nAssuming that comp1 = ledger[CompType1] and similar for the others, these expressions will loop over the Entities that are in comp1, in comp2 or comp3, and not in comp4.\n\n\n\n\n\n","category":"macro"},{"location":"iteration/#Overseer.@safe_entities_in","page":"Iteration","title":"Overseer.@safe_entities_in","text":"@safe_entities_in(comp_expr)\n@safe_entities_in(ledger, comp_expr)\n\nSimilar to @entities_in but safe to pop! entities during iteration.\n\n\n\n\n\n","category":"macro"},{"location":"iteration/#Overseer.pools","page":"Iteration","title":"Overseer.pools","text":"pools(c::PooledComponent)\n\nReturns an iterator that loops over the pools in c, returning a Tuple with the data and an iterator like the one gotten from entity_pool.\n\nExample\n\nfor (data, entities) in pools(c)\n    for e in entities\n        # do something with e\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"iteration/#Overseer.entity_pool","page":"Iteration","title":"Overseer.entity_pool","text":"entity_pool(c::PooledComponent, pool_id::Int)\nentity_pool(c::PooledComponent, e::AbstractEntity)\n\nReturns an iterator that iterates over all the Entities in the pool with id == pool_id or the pool to which e belongs.\n\nExample\n\nfor e in entity_pool(c, 1)\n    # do something with e belonging to the first pool of c\nend\n\n\n\n\n\n","category":"function"},{"location":"#Overseer","page":"Home","title":"Overseer","text":"","category":"section"}]
}
